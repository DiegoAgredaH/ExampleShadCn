{
  "name": "link-widget",
  "files": [
    {
      "name": "link-widget.tsx",
      "content": "/* eslint-disable tailwindcss/classnames-order */\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Image from \"next/image\"\r\n\r\nimport { Icons } from \"@/components/icons\"\r\n\r\nimport { Button } from \"./button\"\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n} from \"./card\"\r\nimport { Input } from \"./input\"\r\nimport { Textarea } from \"./textarea\"\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  overrideClassName?: string\r\n}\r\n\r\ninterface UrlInfo {\r\n  completeUrl: string\r\n  basicUrl: string\r\n  iconUrl: string\r\n  title: string\r\n}\r\n\r\ninterface CardSize {\r\n  width: string\r\n  height: string\r\n}\r\n\r\nconst LinkWidget = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, children, ...props }, ref) => {\r\n    // === States for edit mode ===\r\n    const [basicUrl, setBasicUrl] = useState<string>(\"\")\r\n    const [completeUrl, setCompleteUrl] = useState<string>(\"\")\r\n    const [createPayload, setCreatePayload] = useState<UrlInfo>()\r\n    const [data, setData] = useState(null)\r\n    const [inputValue, setInputValue] = useState<string>(\"\")\r\n    const [iconUrl, setIconUrl] = useState<string>(\"\")\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    // === Functions for edit mode ===\r\n    const createWidget = () => {\r\n      console.log(\"createPayload\", createPayload)\r\n    }\r\n\r\n    const fetchData = async (url: string) => {\r\n      try {\r\n        const urlEncoded = encodeURIComponent(url)\r\n        const apiKey = \"c8995860-93cb-421e-8fe9-0b35fe0e2459\"\r\n        const requestUrl = `https://opengraph.io/api/1.1/site/${urlEncoded}?accept_lang=auto&use_superior=true&app_id=${apiKey}`\r\n        setLoading(true)\r\n        fetch(requestUrl)\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            setData(data)\r\n            getBasicUrl(data.htmlInferred.url)\r\n            setIconUrl(data.htmlInferred.favicon)\r\n            setTitle(data.htmlInferred.site_name)\r\n            setCompleteUrl(data.htmlInferred.url)\r\n            setLoading(false)\r\n          })\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    }\r\n\r\n    const getBasicUrl = (url: string) => {\r\n      if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\r\n        url = `https://${url} `\r\n      }\r\n      const urlObject = new URL(url)\r\n      const updatedHostname = urlObject.hostname.replace(/^www\\./, \"\")\r\n      setBasicUrl(updatedHostname)\r\n    }\r\n\r\n    const handleAddClick = async () => {\r\n      if (isValidURL(inputValue)) {\r\n        fetchData(inputValue)\r\n      }\r\n    }\r\n\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setInputValue(event.target.value)\r\n    }\r\n\r\n    const handlePasteClick = async () => {\r\n      try {\r\n        const clipboardText = await navigator.clipboard.readText()\r\n        setInputValue(clipboardText)\r\n      } catch (error) {\r\n        console.error(\"Error reading the clipboard: \", error)\r\n      }\r\n    }\r\n\r\n    const isValidURL = (url: string) => {\r\n      const urlPattern =\r\n        /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$|^www\\.[^\\s/$.?#].[^\\s]*$|^[a-zA-Z]\\.[a-zA-Z\\d]*[a-zA-Z]$/\r\n\r\n      return urlPattern.test(url)\r\n    }\r\n\r\n    // === Functions for view mode ===\r\n    const handleTextAreaChange = (\r\n      event: React.ChangeEvent<HTMLTextAreaElement>\r\n    ) => {\r\n      setTitle(event.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (data) {\r\n        const payload = {\r\n          completeUrl,\r\n          basicUrl,\r\n          iconUrl,\r\n          title,\r\n        }\r\n        setCreatePayload(payload)\r\n      }\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n      createWidget()\r\n    }, [createPayload])\r\n\r\n    return (\r\n      <>\r\n        {loading ? (\r\n          <div className=\"flex items-center text-sm text-muted-foreground\">\r\n            <Icons.spinner className=\"mr-2 h-4 w-4 animate-spin\" />\r\n            Loading...\r\n          </div>\r\n        ) : data ? (\r\n          <a href={completeUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <Card\r\n              className={`h-[178px] w-[178px] relative rounded-3xl p-6 shadow-sm `}\r\n              {...props}\r\n            >\r\n              <div className={``}>\r\n                <CardHeader className={`mt-2 p-0 `}>\r\n                  <CardDescription>\r\n                    {iconUrl && (\r\n                      <Image src={iconUrl} width={40} height={40} alt=\"Icono\" />\r\n                    )}\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className={`grow p-0`}>\r\n                  <Textarea\r\n                    overrideClassName=\"min-h-8 mt-2 flex h-8 max-h-20 w-full resize-y items-center overflow-hidden rounded-md bg-white pt-2 text-sm font-semibold placeholder:font-normal placeholder:text-gray-400 hover:bg-gray-100 focus:outline-none\"\r\n                    value={title}\r\n                    placeholder=\"Title...\"\r\n                    id=\"textArea\"\r\n                    onChange={handleTextAreaChange}\r\n                    onClick={(e) => e.preventDefault()}\r\n                  />\r\n                </CardContent>\r\n                <CardFooter className={`p-0`}>\r\n                  {basicUrl && (\r\n                    <div className=\"text-xs text-gray-400\">{basicUrl}</div>\r\n                  )}\r\n                </CardFooter>\r\n              </div>\r\n            </Card>\r\n          </a>\r\n        ) : (\r\n          <div className=\"flex h-10 items-center rounded-lg border p-2 text-sm shadow-md focus-visible:outline-none\">\r\n            <Input\r\n              overrideClassName=\"mr-2 w-full rounded-lg focus:outline-none\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Enter Link\"\r\n              type=\"widget\"\r\n              value={inputValue}\r\n              ref={ref}\r\n              {...props}\r\n            />\r\n            {inputValue ? (\r\n              <Button\r\n                size=\"widget\"\r\n                className=\"bg-green-400 font-bold text-white hover:bg-green-500\"\r\n                onClick={handleAddClick}\r\n              >\r\n                Add\r\n              </Button>\r\n            ) : (\r\n              <Button size=\"widget\" onClick={handlePasteClick}>\r\n                Paste\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n)\r\nLinkWidget.displayName = \"LinkWidget\"\r\n\r\nexport { LinkWidget }\r\n"
    }
  ],
  "type": "components:ui"
}