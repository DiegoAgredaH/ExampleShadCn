{
  "name": "link-widget",
  "files": [
    {
      "name": "link-widget.tsx",
      "content": "/* eslint-disable tailwindcss/classnames-order */\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Image from \"next/image\"\r\n\r\nimport { Icons } from \"@/components/icons\"\r\n\r\nimport { Button } from \"./button\"\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n} from \"./card\"\r\nimport { Input } from \"./input\"\r\nimport { Textarea } from \"./textarea\"\r\nimport { ImageIcon, Trash } from \"lucide-react\"\r\nimport { ResizeBar } from \"./resize-bar\"\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  overrideClassName?: string\r\n}\r\n\r\ninterface UrlInfo {\r\n  completeUrl: string\r\n  basicUrl: string\r\n  iconUrl: string\r\n  title: string\r\n}\r\n\r\ninterface CardSize {\r\n  width: string\r\n  height: string\r\n}\r\n\r\ntype ButtonType =\r\n  | \"small_square_button\"\r\n  | \"small_rectangle_button\"\r\n  | \"rectangle_button\"\r\n  | \"rectangle_vertical_button\"\r\n  | \"square_button\"\r\n\r\nconst LinkWidget = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, children, ...props }, ref) => {\r\n    // === States for edit mode ===\r\n    const [basicUrl, setBasicUrl] = useState<string>(\"\")\r\n    const [completeUrl, setCompleteUrl] = useState<string>(\"\")\r\n    const [createPayload, setCreatePayload] = useState<UrlInfo>()\r\n    const [data, setData] = useState(null)\r\n    const [inputValue, setInputValue] = useState<string>(\"\")\r\n    const [iconUrl, setIconUrl] = useState<string>(\"\")\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    // === States for preview mode ===\r\n    const [cardSize, setCardSize] = useState<CardSize>({\r\n      width: \"178px\",\r\n      height: \"178px\",\r\n    })\r\n    const [isHovered, setIsHovered] = useState(false)\r\n    const [isHoveredImage, setIsHoveredImage] = useState(false)\r\n    const [selectedButton, setSelectedButton] = useState<ButtonType>(\r\n      \"small_square_button\"\r\n    )\r\n\r\n    // === Functions for edit mode ===\r\n    //function to create a widget in a database\r\n    const createWidget = () => {\r\n      console.log(\"createPayload\", createPayload)\r\n    }\r\n\r\n    const fetchData = async (url: string) => {\r\n      try {\r\n        const urlEncoded = encodeURIComponent(url)\r\n        const apiKey = \"c8995860-93cb-421e-8fe9-0b35fe0e2459\"\r\n        const requestUrl = `https://opengraph.io/api/1.1/site/${urlEncoded}?accept_lang=auto&use_superior=true&app_id=${apiKey}`\r\n        setLoading(true)\r\n        fetch(requestUrl)\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            setData(data)\r\n            getBasicUrl(data.htmlInferred.url)\r\n            setIconUrl(data.htmlInferred.favicon)\r\n            setTitle(data.htmlInferred.site_name)\r\n            setCompleteUrl(data.htmlInferred.url)\r\n            setLoading(false)\r\n          })\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    }\r\n\r\n    const getBasicUrl = (url: string) => {\r\n      if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\r\n        url = `https://${url} `\r\n      }\r\n      const urlObject = new URL(url)\r\n      const updatedHostname = urlObject.hostname.replace(/^www\\./, \"\")\r\n      setBasicUrl(updatedHostname)\r\n    }\r\n\r\n    const handleAddClick = async () => {\r\n      if (isValidURL(inputValue)) {\r\n        fetchData(inputValue)\r\n      }\r\n    }\r\n\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setInputValue(event.target.value)\r\n    }\r\n\r\n    const handlePasteClick = async () => {\r\n      try {\r\n        const clipboardText = await navigator.clipboard.readText()\r\n        setInputValue(clipboardText)\r\n      } catch (error) {\r\n        console.error(\"Error reading the clipboard: \", error)\r\n      }\r\n    }\r\n\r\n    const isValidURL = (url: string) => {\r\n      const urlPattern =\r\n        /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$|^www\\.[^\\s/$.?#].[^\\s]*$|^[a-zA-Z]\\.[a-zA-Z\\d]*[a-zA-Z]$/\r\n\r\n      return urlPattern.test(url)\r\n    }\r\n\r\n    // === Functions for view mode ===\r\n    const handleTextAreaChange = (\r\n      event: React.ChangeEvent<HTMLTextAreaElement>\r\n    ) => {\r\n      setTitle(event.target.value)\r\n    }\r\n\r\n    // === Functions for preview mode ===\r\n    //Function to delete a widget from the database\r\n    const handleDeleteWidget = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault()\r\n      // Logic to perform the delete\r\n      console.log(\"Logic to perform the delete\")\r\n    }\r\n\r\n    // Function to resize an widget\r\n    const handleResize = (\r\n      e: React.MouseEvent<HTMLButtonElement>,\r\n      width: string,\r\n      height: string,\r\n      buttonName: ButtonType\r\n    ) => {\r\n      e.preventDefault()\r\n      setCardSize({ width, height })\r\n      setSelectedButton(buttonName)\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (data) {\r\n        const payload = {\r\n          completeUrl,\r\n          basicUrl,\r\n          iconUrl,\r\n          title,\r\n        }\r\n        setCreatePayload(payload)\r\n      }\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n      createWidget()\r\n    }, [createPayload])\r\n\r\n    return (\r\n      <>\r\n        {loading ? (\r\n          <div className=\"flex items-center text-sm text-muted-foreground\">\r\n            <Icons.spinner className=\"mr-2 h-4 w-4 animate-spin\" />\r\n            Loading...\r\n          </div>\r\n        ) : data ? (\r\n          <a href={completeUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <Card\r\n              className={`h-[${cardSize.height}] w-[${\r\n                cardSize.width\r\n              }] relative rounded-3xl p-6 shadow-sm \r\n                ${\r\n                  selectedButton === \"small_rectangle_button\" &&\r\n                  \" flex flex-row p-4\"\r\n                }\r\n                ${\r\n                  selectedButton === \"rectangle_button\" &&\r\n                  \" grid grid-cols-2 gap-4\"\r\n                }\r\n                `}\r\n              {...props}\r\n              onMouseEnter={() => setIsHovered(true)}\r\n              onMouseLeave={() => setIsHovered(false)}\r\n            >\r\n              <div\r\n                className={`${\r\n                  selectedButton === \"small_rectangle_button\" &&\r\n                  \" flex grow flex-row\"\r\n                }`}\r\n              >\r\n                <CardHeader\r\n                  className={`mt-2 p-0 ${\r\n                    selectedButton === \"small_rectangle_button\" && \"ml-2\"\r\n                  }`}\r\n                >\r\n                  <CardDescription>\r\n                    {iconUrl && (\r\n                      <Image\r\n                        src={iconUrl}\r\n                        width={`${\r\n                          selectedButton === \"small_rectangle_button\" ? 30 : 40\r\n                        }`}\r\n                        height={`${\r\n                          selectedButton === \"small_rectangle_button\" ? 30 : 40\r\n                        }`}\r\n                        alt=\"Icono\"\r\n                      />\r\n                    )}\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent\r\n                  className={`grow p-0 ${\r\n                    selectedButton === \"small_rectangle_button\" && \"ml-2\"\r\n                  }`}\r\n                >\r\n                  <Textarea\r\n                    value={title}\r\n                    placeholder=\"Title...\"\r\n                    id=\"textArea\"\r\n                    onChange={handleTextAreaChange}\r\n                    onClick={(e) => e.preventDefault()}\r\n                  />\r\n                </CardContent>\r\n                <CardFooter\r\n                  className={`${\r\n                    selectedButton === \"small_rectangle_button\" && \"hidden\"\r\n                  }`}\r\n                >\r\n                  {basicUrl && (\r\n                    <div className=\"text-xs text-gray-400\">{basicUrl}</div>\r\n                  )}\r\n                </CardFooter>\r\n                {isHovered && (\r\n                  <>\r\n                    <Button\r\n                      className=\"absolute left-0 top-0 -translate-x-1/3 -translate-y-1/3 rounded-full p-2 shadow-2xl\"\r\n                      variant=\"outline\"\r\n                      size=\"icon\"\r\n                      id=\"deleteButton\"\r\n                      onClick={handleDeleteWidget}\r\n                    >\r\n                      <Trash strokeWidth={2} className=\"h-4 w-4\" />\r\n                    </Button>\r\n\r\n                    <ResizeBar\r\n                      selectedButton={selectedButton}\r\n                      handleResize={handleResize}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n              {selectedButton === \"rectangle_button\" && (\r\n                <Card\r\n                  className=\"relative hover:bg-slate-500\"\r\n                  onMouseEnter={() => setIsHoveredImage(true)}\r\n                  onMouseLeave={() => setIsHoveredImage(false)}\r\n                >\r\n                  Image\r\n                  {isHoveredImage && (\r\n                    <div\r\n                      id=\"resizableBar\"\r\n                      className=\"absolute left-0 top-0 -translate-x-1/3 -translate-y-1/3 rounded-lg p-2\"\r\n                    >\r\n                      <Card className=\"h-[36px] w-[74px] bg-black\">\r\n                        <CardHeader className=\"space-y-0 p-0\">\r\n                          <CardContent className=\"flex items-center justify-center pt-0\">\r\n                            <Button\r\n                              className={`border-0 bg-black text-white`}\r\n                              variant=\"outline\"\r\n                              size=\"icon\"\r\n                              id=\"small_square_button\"\r\n                              onClick={(e) =>\r\n                                handleResize(\r\n                                  e,\r\n                                  \"178px\",\r\n                                  \"178px\",\r\n                                  \"small_square_button\"\r\n                                )\r\n                              }\r\n                            >\r\n                              <ImageIcon\r\n                                strokeWidth={2}\r\n                                className=\"m-2 h-6 w-6\"\r\n                              />\r\n                            </Button>\r\n                            <Button\r\n                              className={`border-0 bg-black text-white`}\r\n                              variant=\"outline\"\r\n                              size=\"icon\"\r\n                              id=\"small_rectangle_button\"\r\n                              onClick={(e) =>\r\n                                handleResize(\r\n                                  e,\r\n                                  \"380px\",\r\n                                  \"77px\",\r\n                                  \"small_rectangle_button\"\r\n                                )\r\n                              }\r\n                            >\r\n                              <Trash strokeWidth={2} className=\"m-2 h-6 w-6\" />\r\n                            </Button>\r\n                          </CardContent>\r\n                        </CardHeader>\r\n                      </Card>\r\n                    </div>\r\n                  )}\r\n                </Card>\r\n              )}\r\n            </Card>\r\n          </a>\r\n        ) : (\r\n          <div className=\"flex h-10 items-center rounded-lg border p-2 text-sm shadow-md focus-visible:outline-none\">\r\n            <Input\r\n              overrideClassName=\"mr-2 w-full rounded-lg focus:outline-none\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Enter Link\"\r\n              type=\"widget\"\r\n              value={inputValue}\r\n              ref={ref}\r\n              {...props}\r\n            />\r\n            {inputValue ? (\r\n              <Button\r\n                size=\"widget\"\r\n                className=\"bg-green-400 font-bold text-white hover:bg-green-500\"\r\n                onClick={handleAddClick}\r\n              >\r\n                Add\r\n              </Button>\r\n            ) : (\r\n              <Button size=\"widget\" onClick={handlePasteClick}>\r\n                Paste\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n)\r\nLinkWidget.displayName = \"LinkWidget\"\r\n\r\nexport { LinkWidget }\r\n"
    }
  ],
  "type": "components:ui"
}